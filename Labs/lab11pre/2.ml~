module type QUEUE =
sig 
  type 'a tk 
  val empty: unit -> 'a tk
  val first: 'a tk -> 'a
  val enqueue:'a tk * 'a -> 'a tk
  val dequeue: 'a tk -> 'a tk
  val isEmpty: 'a tk -> bool
  val toList: ('a -> 'a -> int) -> 'a tk ->  ('a * int) list
                         
end;;



module type TYP =
sig
  type t
  
end;;

type para = int * int;;

module ParaType: TYP with type t = para =
struct
  type t = para
 
end;;

module IntType: TYP with type t = int =
struct
  type t = int
  
end;;

module StringType: TYP with type t = string =
struct
  type t = string
  
end;;



module Funktory(Key: TYP) : QUEUE = 
struct 
  type 'a tk = KolejkaPusta | Skladowa of 'a * 'a tk 
  let empty () = KolejkaPusta
  let rec enqueue (q, x) = 
    match q with
    | KolejkaPusta -> Skladowa(x,KolejkaPusta)
    | Skladowa(h,t) -> Skladowa(h,enqueue (t, x))
  let first q = 
    match q with
    | KolejkaPusta -> failwith "pusta kolejka"
    | Skladowa(h,t) -> h
  let dequeue q =
    match q with
    | KolejkaPusta -> failwith "pusta kolejka"
    | Skladowa(h,t) -> t
  let isEmpty q =
    match q with
    | KolejkaPusta -> true 
    | Skladowa(_,_) -> false 
  let toList f q =
    let rec fHelp q i =
      match q with
      | KolejkaPusta -> []
      | Skladowa(v,t) -> (v,i)::fHelp t (i+1)
    in List.sort (fun (a,_) (b,_) -> f a b) (fHelp q 1) 
  
end;;

module IntQueue = Funktory(IntType);;

let q = IntQueue.empty();;
let q = IntQueue.enqueue(q,55);;
IntQueue.first(q);;
let q = IntQueue.enqueue(q,3);;
let q = IntQueue.enqueue(q,22);;
IntQueue.toList (fun a b -> compare a b) q;;


module StringQueue = Funktory(StringType);;
let s = StringQueue.empty();;
let s = StringQueue.enqueue(s,2);;
let s = StringQueue.enqueue(s,"zupa");;
let s = StringQueue.enqueue(s,"pizza");;
StringQueue.toList (fun a b -> compare (String.length a) (String.length b)) s;;

module PairQueue = Funktory(ParaType);;
let p = PairQueue.empty();;
let p = PairQueue.enqueue(p,(1,10));;
let p = PairQueue.enqueue(p,(2,8));;
let p = PairQueue.enqueue(p,(3,6));;
let p = PairQueue.enqueue(p,(4,4));;
PairQueue.toList (fun (,a) (,b) -> compare a b) p;;
